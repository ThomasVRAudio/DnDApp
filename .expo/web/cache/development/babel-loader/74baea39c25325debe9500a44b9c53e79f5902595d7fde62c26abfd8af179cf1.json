{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport * as SQLite from \"expo-sqlite\";\nexport var db = SQLite.openDatabase(\"db.testDb\");\nvar Database = function () {\n  function Database() {\n    var _this = this;\n    _classCallCheck(this, Database);\n    this.RemoveRow = function () {\n      var _ref = _asyncToGenerator(function* (tableName, name) {\n        db.transaction(function (tx) {\n          tx.executeSql(`DELETE FROM ${tableName} WHERE ROWID IN (SELECT ROWID FROM ${tableName} WHERE name = ? LIMIT 1)`, [name]);\n        }, function (error) {\n          return console.error(\"Transaction error:\", error);\n        });\n      });\n      return function (_x, _x2) {\n        return _ref.apply(this, arguments);\n      };\n    }();\n    this.RemoveRowByID = function () {\n      var _ref2 = _asyncToGenerator(function* (tableName, id) {\n        db.transaction(function (tx) {\n          tx.executeSql(`DELETE FROM ${tableName} WHERE ROWID IN (SELECT ROWID FROM ${tableName} WHERE id = ? LIMIT 1)`, [id]);\n        }, function (error) {\n          return console.error(\"Transaction error:\", error);\n        });\n      });\n      return function (_x3, _x4) {\n        return _ref2.apply(this, arguments);\n      };\n    }();\n    this.InitializeDatabase = _asyncToGenerator(function* () {\n      try {\n        var _data$find;\n        _this.CreateTables();\n        var data = yield _this.GetData(\"Initial\");\n        var alreadyExists = data == null ? void 0 : (_data$find = data.find(function (d) {\n          return (d == null ? void 0 : d.name) === \"Initial\";\n        })) == null ? void 0 : _data$find.status;\n        if (alreadyExists !== undefined || alreadyExists === 1) return true;\n        _this.InsertIntoTable(\"ACInitSpeed\", [\"name\", \"amount\", \"turnedOn\"], [\"speed\", 25, 1]);\n        _this.InsertIntoTable(\"ACInitSpeed\", [\"name\", \"amount\", \"turnedOn\"], [\"ac\", 0, 0]);\n        var columns = [\"name\", \"amount\"];\n        var valueNames = [\"maxHealth\", \"currentHealth\", \"tempHealth\"];\n        valueNames.forEach(function (val) {\n          return _this.InsertIntoTable(\"Health\", columns, [val, 0]);\n        });\n        for (var i = 0; i < 9; i++) {\n          database.InsertIntoTable(\"SpellSlots\", [\"name\", \"amount\", \"max\", \"level\"], [`Level ${i + 1} `, 0, 0, i + 1]);\n        }\n        valueNames = [\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"];\n        columns = [\"name\", \"amount\"];\n        valueNames.forEach(function (val) {\n          return _this.InsertIntoTable(\"Modifiers\", columns, [val, 10]);\n        });\n        _this.InsertIntoTable(\"Stats\", [\"name\", \"modifier\"], [\"Spell Attack\", \"Charisma\"]);\n        _this.InsertIntoTable(\"Stats\", [\"name\", \"modifier\"], [\"Spell Save DC\", \"Charisma\"]);\n        var characterValues = [[\"Name\", \"Unknown\"], [\"Level\", \"1\"], [\"Race\", \"Human\"], [\"Background\", \"Adventurer\"], [\"Alignment\", \"Neutral\"], [\"Class\", \"Fighter\"], [\"Experience\", \"0\"]];\n        columns = [\"name\", \"info\"];\n        characterValues.forEach(function (val) {\n          return _this.InsertIntoTable(\"CharacterDetails\", columns, val);\n        });\n        valueNames = [\"Strength\", \"Dexterity\", \"Constitution\", \"Intelligence\", \"Wisdom\", \"Charisma\"];\n        columns = [\"name\", \"status\"];\n        valueNames.forEach(function (val) {\n          return _this.InsertIntoTable(\"SavingThrows\", columns, [val, 0]);\n        });\n        var values = [[\"Acrobatics (DEX)\", 0, \"Dexterity\"], [\"Animal Handling (WIS)\", 0, \"Wisdom\"], [\"Arcana (INT)\", 0, \"Intelligence\"], [\"Athletics (STR)\", 0, \"Strength\"], [\"Deception (CHA)\", 0, \"Charisma\"], [\"History (INT)\", 0, \"Intelligence\"], [\"Insight (WIS)\", 0, \"Wisdom\"], [\"Intimidation (CHA)\", 0, \"Charisma\"], [\"Investigation (INT)\", 0, \"Intelligence\"], [\"Medicine (WIS)\", 0, \"Wisdom\"], [\"Nature (INT)\", 0, \"Intelligence\"], [\"Perception (WIS)\", 0, \"Wisdom\"], [\"Performance (CHA)\", 0, \"Charisma\"], [\"Persuasion (CHA)\", 0, \"Charisma\"], [\"Religion (INT)\", 0, \"Intelligence\"], [\"Sleight of Hand (DEX)\", 0, \"Dexterity\"], [\"Stealth (DEX)\", 0, \"Dexterity\"], [\"Survival (WIS)\", 0, \"Wisdom\"]];\n        columns = [\"name\", \"status\", \"ability\"];\n        values.forEach(function (val) {\n          return _this.InsertIntoTable(\"Skills\", columns, val);\n        });\n        var coinValues = [[\"Copper (cp)\", 0], [\"Silver (sp)\", 0], [\"Electrum (ep)\", 0], [\"Gold (gp)\", 0], [\"Platinum (pp)\", 0]];\n        columns = [\"name\", \"amount\"];\n        coinValues.forEach(function (val) {\n          return _this.InsertIntoTable(\"Coins\", columns, val);\n        });\n        _this.InsertIntoTable(\"Initial\", [\"name\", \"status\"], [\"Initial\", 1]);\n      } catch (error) {\n        console.error(\"Error:\", error);\n      }\n      return true;\n    });\n  }\n  _createClass(Database, [{\n    key: \"CreateTables\",\n    value: function CreateTables() {\n      db.transaction(function (tx) {\n        tx.executeSql(\"create table if not exists Initial (id integer primary key not null, name text, status integer default 0);\");\n        tx.executeSql(\"create table if not exists Modifiers (id integer primary key not null, name text, amount integer default 0);\");\n        tx.executeSql(\"create table if not exists Skills (id integer primary key not null, name text, status integer, ability text);\");\n        tx.executeSql(\"create table if not exists SavingThrows (id integer primary key not null, name text, status integer);\");\n        tx.executeSql(\"create table if not exists CharacterDetails (id integer primary key not null, name text, info text);\");\n        tx.executeSql(\"create table if not exists Health (id integer primary key not null, name text, amount integer);\");\n        tx.executeSql(`\n          create table if not exists Spells \n          (id integer primary key not null, \n            name text, \n            desc text, \n            higher_level text, \n            components text,\n            duration text,\n            level text,\n            range text,\n            casting_time text,\n            school text            \n            );\n          `);\n        tx.executeSql(`\n          create table if not exists SpellSlots \n          (id integer primary key not null, \n            name text, \n            amount integer, \n            max integer, \n            level integer);\n          `);\n        tx.executeSql(`\n          create table if not exists Counters \n          (id integer primary key not null, \n            name text, \n            amount integer, \n            max integer);\n          `);\n        tx.executeSql(`\n          create table if not exists Weaponset\n          (id integer primary key not null,\n            name text,\n            damageDice text,\n            finesse integer,\n            weaponRange text,\n            modifier text,\n            weaponID integer\n            )\n          `);\n        tx.executeSql(`\n          create table if not exists Armorset\n          (id integer primary key not null,\n            name text,\n            category text,\n            base integer,\n            dexBonus integer,\n            maxBonus integer\n            )\n          `);\n        tx.executeSql(`\n          create table if not exists ACInitSpeed\n          (id integer primary key not null,\n            name text,\n            amount integer,\n            turnedOn integer\n            )\n          `);\n        tx.executeSql(`\n          create table if not exists Items\n          (id integer primary key not null,\n            name text,\n            desc text\n            )\n          `);\n        tx.executeSql(`\n          create table if not exists Coins\n          (id integer primary key not null,\n            name text,\n            amount integer\n            )\n          `);\n        tx.executeSql(`\n          create table if not exists Stats\n          (id integer primary key not null,\n            name text,\n            modifier text\n            )\n          `);\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(\"success!\");\n      });\n    }\n  }, {\n    key: \"DropTable\",\n    value: function DropTable(tableName) {\n      db.transaction(function (tx) {\n        tx.executeSql(`DROP TABLE IF EXISTS ${tableName};`);\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(`Dropped table: ${tableName}`);\n      });\n    }\n  }, {\n    key: \"GetData\",\n    value: function GetData(tableName) {\n      return new Promise(function (resolve, reject) {\n        db.transaction(function (tx) {\n          tx.executeSql(`SELECT * FROM ${tableName}`, [], function (_, resultSet) {\n            var rows = resultSet.rows;\n            var data = [];\n            for (var i = 0; i < rows.length; i++) {\n              data.push(rows.item(i));\n            }\n            resolve(data);\n          });\n        }, function (error) {\n          console.log(error);\n          reject(error);\n        }, function () {\n          return console.log(\"Get Data: success!\");\n        });\n      });\n    }\n  }, {\n    key: \"UpdateTable\",\n    value: function UpdateTable(tableName, name, columnName, newValue) {\n      db.transaction(function (tx) {\n        tx.executeSql(`UPDATE ${tableName} SET ${columnName} = ? WHERE name = ?`, [newValue, name]);\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(`Updated amount for ${name}: success!`);\n      });\n    }\n  }, {\n    key: \"UpdateTableByID\",\n    value: function UpdateTableByID(tableName, id, columnName, newValue) {\n      db.transaction(function (tx) {\n        tx.executeSql(`UPDATE ${tableName} SET ${columnName} = ? WHERE ID = ?`, [newValue, id]);\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(`Updated amount for ${id}: success!`);\n      });\n    }\n  }, {\n    key: \"InsertIntoTable\",\n    value: function InsertIntoTable(table, columns, values) {\n      var placeholders = values.map(function () {\n        return \"?\";\n      }).join(\", \");\n      db.transaction(function (tx) {\n        tx.executeSql(`INSERT OR REPLACE INTO ${table} (${columns.join(\", \")}) VALUES (${placeholders})`, values);\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(\"Insert: success!\");\n      });\n    }\n  }, {\n    key: \"ShowAllTables\",\n    value: function ShowAllTables() {\n      db.transaction(function (tx) {\n        tx.executeSql(\"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';\", [], function (_, result) {\n          var tables = [];\n          for (var i = 0; i < result.rows.length; i++) {\n            tables.push(result.rows.item(i).name);\n          }\n          console.log(\"Tables:\", tables);\n        });\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(\"Show All Tables: success!\");\n      });\n    }\n  }, {\n    key: \"ShowTableContent\",\n    value: function ShowTableContent(tableName) {\n      db.transaction(function (tx) {\n        tx.executeSql(`PRAGMA table_info(${tableName});`, [], function (_, result) {\n          var tables = [];\n          for (var i = 0; i < result.rows.length; i++) {\n            tables.push(result.rows.item(i).name);\n          }\n          console.log(\"Tables:\", tables);\n        });\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(\"Show All Tables: success!\");\n      });\n    }\n  }, {\n    key: \"TestDataBase\",\n    value: function TestDataBase() {\n      var tableName = \"Armorset\";\n      db.transaction(function (tx) {\n        tx.executeSql(`SELECT * FROM ${tableName};`, [], function (_, result) {\n          var rows = result.rows;\n          console.log(`Table: ${tableName}`);\n          for (var i = 0; i < rows.length; i++) {\n            console.log(rows.item(i));\n          }\n        });\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(\"TestDataBase: success!\");\n      });\n    }\n  }, {\n    key: \"RemoveAllRows\",\n    value: function RemoveAllRows(tableName) {\n      db.transaction(function (tx) {\n        tx.executeSql(`DELETE FROM ${tableName};`, [], function (_, deleteResult) {\n          console.log(`Removed all rows from ${tableName}. Rows affected: ${deleteResult.rowsAffected}`);\n        });\n      }, function (error) {\n        return console.log(error);\n      }, function () {\n        return console.log(`RemoveAllRows for ${tableName}: success!`);\n      });\n    }\n  }]);\n  return Database;\n}();\nexport var database = new Database();","map":{"version":3,"names":["SQLite","db","openDatabase","Database","_this","_classCallCheck","RemoveRow","_ref","_asyncToGenerator","tableName","name","transaction","tx","executeSql","error","console","_x","_x2","apply","arguments","RemoveRowByID","_ref2","id","_x3","_x4","InitializeDatabase","_data$find","CreateTables","data","GetData","alreadyExists","find","d","status","undefined","InsertIntoTable","columns","valueNames","forEach","val","i","database","characterValues","values","coinValues","_createClass","key","value","log","DropTable","Promise","resolve","reject","_","resultSet","rows","length","push","item","UpdateTable","columnName","newValue","UpdateTableByID","table","placeholders","map","join","ShowAllTables","result","tables","ShowTableContent","TestDataBase","RemoveAllRows","deleteResult","rowsAffected"],"sources":["D:/Users/Thomas/Documents/Programming Projects/Mobile/DnD App/DnDApp3/DnDApp/components/database.ts"],"sourcesContent":["import * as SQLite from \"expo-sqlite\";\r\nimport { Initial } from \"./DataInterfaces\";\r\nexport const db = SQLite.openDatabase(\"db.testDb\");\r\n\r\nclass Database {\r\n  CreateTables(): void {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          \"create table if not exists Initial (id integer primary key not null, name text, status integer default 0);\"\r\n        );\r\n\r\n        tx.executeSql(\r\n          \"create table if not exists Modifiers (id integer primary key not null, name text, amount integer default 0);\"\r\n        );\r\n\r\n        tx.executeSql(\r\n          \"create table if not exists Skills (id integer primary key not null, name text, status integer, ability text);\"\r\n        );\r\n\r\n        tx.executeSql(\r\n          \"create table if not exists SavingThrows (id integer primary key not null, name text, status integer);\"\r\n        );\r\n\r\n        tx.executeSql(\r\n          \"create table if not exists CharacterDetails (id integer primary key not null, name text, info text);\"\r\n        );\r\n\r\n        tx.executeSql(\r\n          \"create table if not exists Health (id integer primary key not null, name text, amount integer);\"\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Spells \r\n          (id integer primary key not null, \r\n            name text, \r\n            desc text, \r\n            higher_level text, \r\n            components text,\r\n            duration text,\r\n            level text,\r\n            range text,\r\n            casting_time text,\r\n            school text            \r\n            );\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists SpellSlots \r\n          (id integer primary key not null, \r\n            name text, \r\n            amount integer, \r\n            max integer, \r\n            level integer);\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Counters \r\n          (id integer primary key not null, \r\n            name text, \r\n            amount integer, \r\n            max integer);\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Weaponset\r\n          (id integer primary key not null,\r\n            name text,\r\n            damageDice text,\r\n            finesse integer,\r\n            weaponRange text,\r\n            modifier text,\r\n            weaponID integer\r\n            )\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Armorset\r\n          (id integer primary key not null,\r\n            name text,\r\n            category text,\r\n            base integer,\r\n            dexBonus integer,\r\n            maxBonus integer\r\n            )\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists ACInitSpeed\r\n          (id integer primary key not null,\r\n            name text,\r\n            amount integer,\r\n            turnedOn integer\r\n            )\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Items\r\n          (id integer primary key not null,\r\n            name text,\r\n            desc text\r\n            )\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Coins\r\n          (id integer primary key not null,\r\n            name text,\r\n            amount integer\r\n            )\r\n          `\r\n        );\r\n\r\n        tx.executeSql(\r\n          `\r\n          create table if not exists Stats\r\n          (id integer primary key not null,\r\n            name text,\r\n            modifier text\r\n            )\r\n          `\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(\"success!\")\r\n    );\r\n  }\r\n\r\n  DropTable(tableName: string): void {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(`DROP TABLE IF EXISTS ${tableName};`);\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(`Dropped table: ${tableName}`)\r\n    );\r\n  }\r\n\r\n  GetData<T>(tableName: string): Promise<T[] | null> {\r\n    return new Promise((resolve, reject) => {\r\n      db.transaction(\r\n        (tx: SQLite.SQLTransaction) => {\r\n          tx.executeSql(\r\n            `SELECT * FROM ${tableName}`,\r\n            [],\r\n            (_: SQLite.SQLTransaction, resultSet: SQLite.SQLResultSet) => {\r\n              const rows = resultSet.rows;\r\n              const data: T[] = [];\r\n              for (let i = 0; i < rows.length; i++) {\r\n                data.push(rows.item(i));\r\n              }\r\n              resolve(data);\r\n            }\r\n          );\r\n        },\r\n        (error: SQLite.SQLError) => {\r\n          console.log(error);\r\n          reject(error);\r\n        },\r\n        () => console.log(\"Get Data: success!\")\r\n      );\r\n    });\r\n  }\r\n\r\n  UpdateTable(\r\n    tableName: string,\r\n    name: string,\r\n    columnName: string,\r\n    newValue: string | number\r\n  ): void {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          `UPDATE ${tableName} SET ${columnName} = ? WHERE name = ?`,\r\n          [newValue, name]\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(`Updated amount for ${name}: success!`)\r\n    );\r\n  }\r\n\r\n  UpdateTableByID(\r\n    tableName: string,\r\n    id: number,\r\n    columnName: string,\r\n    newValue: string | number\r\n  ): void {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          `UPDATE ${tableName} SET ${columnName} = ? WHERE ID = ?`,\r\n          [newValue, id]\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(`Updated amount for ${id}: success!`)\r\n    );\r\n  }\r\n\r\n  RemoveRow = async (tableName: string, name: string): Promise<void> => {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          `DELETE FROM ${tableName} WHERE ROWID IN (SELECT ROWID FROM ${tableName} WHERE name = ? LIMIT 1)`,\r\n          [name]\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.error(\"Transaction error:\", error)\r\n    );\r\n  };\r\n\r\n  RemoveRowByID = async (tableName: string, id: number): Promise<void> => {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          `DELETE FROM ${tableName} WHERE ROWID IN (SELECT ROWID FROM ${tableName} WHERE id = ? LIMIT 1)`,\r\n          [id]\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.error(\"Transaction error:\", error)\r\n    );\r\n  };\r\n\r\n  InsertIntoTable(table: string, columns: string[], values: any[]) {\r\n    const placeholders = values.map(() => \"?\").join(\", \");\r\n\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          `INSERT OR REPLACE INTO ${table} (${columns.join(\r\n            \", \"\r\n          )}) VALUES (${placeholders})`,\r\n          values\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(\"Insert: success!\")\r\n    );\r\n  }\r\n\r\n  ShowAllTables() {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(\r\n          \"SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';\",\r\n          [],\r\n          (_, result) => {\r\n            const tables: string[] = [];\r\n            for (let i = 0; i < result.rows.length; i++) {\r\n              tables.push(result.rows.item(i).name);\r\n            }\r\n            console.log(\"Tables:\", tables);\r\n          }\r\n        );\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(\"Show All Tables: success!\")\r\n    );\r\n  }\r\n\r\n  ShowTableContent(tableName: string) {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(`PRAGMA table_info(${tableName});`, [], (_, result) => {\r\n          const tables: string[] = [];\r\n          for (let i = 0; i < result.rows.length; i++) {\r\n            tables.push(result.rows.item(i).name);\r\n          }\r\n          console.log(\"Tables:\", tables);\r\n        });\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(\"Show All Tables: success!\")\r\n    );\r\n  }\r\n\r\n  TestDataBase(): void {\r\n    const tableName = \"Armorset\";\r\n\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(`SELECT * FROM ${tableName};`, [], (_, result) => {\r\n          const rows = result.rows;\r\n          console.log(`Table: ${tableName}`);\r\n          for (let i = 0; i < rows.length; i++) {\r\n            console.log(rows.item(i));\r\n          }\r\n        });\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(\"TestDataBase: success!\")\r\n    );\r\n  }\r\n\r\n  RemoveAllRows(tableName: string): void {\r\n    db.transaction(\r\n      (tx: SQLite.SQLTransaction) => {\r\n        tx.executeSql(`DELETE FROM ${tableName};`, [], (_, deleteResult) => {\r\n          console.log(\r\n            `Removed all rows from ${tableName}. Rows affected: ${deleteResult.rowsAffected}`\r\n          );\r\n        });\r\n      },\r\n      (error: SQLite.SQLError) => console.log(error),\r\n      () => console.log(`RemoveAllRows for ${tableName}: success!`)\r\n    );\r\n  }\r\n\r\n  InitializeDatabase = async (): Promise<boolean> => {\r\n    // this.DropTable(\"ACInitSpeed\");\r\n    // this.DropTable(\"Health\");\r\n    // this.DropTable(\"SpellSlots\");\r\n    // this.DropTable(\"Modifiers\");\r\n    // this.DropTable(\"Stats\");\r\n    // this.DropTable(\"CharacterDetails\");\r\n    // this.DropTable(\"SavingThrows\");\r\n    // this.DropTable(\"Skills\");\r\n    // this.DropTable(\"Initial\");\r\n    // this.DropTable(\"Spells\");\r\n    // this.DropTable(\"Armorset\");\r\n    // this.DropTable(\"Weaponset\");\r\n    // this.DropTable(\"Counters\");\r\n    // this.DropTable(\"Items\");\r\n    // this.DropTable(\"Coins\");\r\n    // this.ShowAllTables();\r\n    // return false;\r\n\r\n    try {\r\n      this.CreateTables();\r\n      const data = await this.GetData<Initial | null>(\"Initial\");\r\n\r\n      let alreadyExists = data?.find((d) => d?.name === \"Initial\")?.status;\r\n\r\n      if (alreadyExists !== undefined || alreadyExists === 1) return true;\r\n\r\n      this.InsertIntoTable(\r\n        \"ACInitSpeed\",\r\n        [\"name\", \"amount\", \"turnedOn\"],\r\n        [\"speed\", 25, 1]\r\n      );\r\n      this.InsertIntoTable(\r\n        \"ACInitSpeed\",\r\n        [\"name\", \"amount\", \"turnedOn\"],\r\n        [\"ac\", 0, 0]\r\n      );\r\n\r\n      let columns = [\"name\", \"amount\"];\r\n      let valueNames = [\"maxHealth\", \"currentHealth\", \"tempHealth\"];\r\n      valueNames.forEach((val) =>\r\n        this.InsertIntoTable(\"Health\", columns, [val, 0])\r\n      );\r\n\r\n      for (let i = 0; i < 9; i++) {\r\n        database.InsertIntoTable(\r\n          \"SpellSlots\",\r\n          [\"name\", \"amount\", \"max\", \"level\"],\r\n          [`Level ${i + 1} `, 0, 0, i + 1]\r\n        );\r\n      }\r\n\r\n      valueNames = [\r\n        \"Strength\",\r\n        \"Dexterity\",\r\n        \"Constitution\",\r\n        \"Intelligence\",\r\n        \"Wisdom\",\r\n        \"Charisma\",\r\n      ];\r\n\r\n      columns = [\"name\", \"amount\"];\r\n      valueNames.forEach((val) =>\r\n        this.InsertIntoTable(\"Modifiers\", columns, [val, 10])\r\n      );\r\n\r\n      this.InsertIntoTable(\r\n        \"Stats\",\r\n        [\"name\", \"modifier\"],\r\n        [\"Spell Attack\", \"Charisma\"]\r\n      );\r\n      this.InsertIntoTable(\r\n        \"Stats\",\r\n        [\"name\", \"modifier\"],\r\n        [\"Spell Save DC\", \"Charisma\"]\r\n      );\r\n\r\n      let characterValues = [\r\n        [\"Name\", \"Unknown\"],\r\n        [\"Level\", \"1\"],\r\n        [\"Race\", \"Human\"],\r\n        [\"Background\", \"Adventurer\"],\r\n        [\"Alignment\", \"Neutral\"],\r\n        [\"Class\", \"Fighter\"],\r\n        [\"Experience\", \"0\"],\r\n      ];\r\n\r\n      columns = [\"name\", \"info\"];\r\n      characterValues.forEach((val) =>\r\n        this.InsertIntoTable(\"CharacterDetails\", columns, val)\r\n      );\r\n\r\n      valueNames = [\r\n        \"Strength\",\r\n        \"Dexterity\",\r\n        \"Constitution\",\r\n        \"Intelligence\",\r\n        \"Wisdom\",\r\n        \"Charisma\",\r\n      ];\r\n\r\n      columns = [\"name\", \"status\"];\r\n      valueNames.forEach((val) =>\r\n        this.InsertIntoTable(\"SavingThrows\", columns, [val, 0])\r\n      );\r\n\r\n      let values = [\r\n        [\"Acrobatics (DEX)\", 0, \"Dexterity\"],\r\n        [\"Animal Handling (WIS)\", 0, \"Wisdom\"],\r\n        [\"Arcana (INT)\", 0, \"Intelligence\"],\r\n        [\"Athletics (STR)\", 0, \"Strength\"],\r\n        [\"Deception (CHA)\", 0, \"Charisma\"],\r\n        [\"History (INT)\", 0, \"Intelligence\"],\r\n        [\"Insight (WIS)\", 0, \"Wisdom\"],\r\n        [\"Intimidation (CHA)\", 0, \"Charisma\"],\r\n        [\"Investigation (INT)\", 0, \"Intelligence\"],\r\n        [\"Medicine (WIS)\", 0, \"Wisdom\"],\r\n        [\"Nature (INT)\", 0, \"Intelligence\"],\r\n        [\"Perception (WIS)\", 0, \"Wisdom\"],\r\n        [\"Performance (CHA)\", 0, \"Charisma\"],\r\n        [\"Persuasion (CHA)\", 0, \"Charisma\"],\r\n        [\"Religion (INT)\", 0, \"Intelligence\"],\r\n        [\"Sleight of Hand (DEX)\", 0, \"Dexterity\"],\r\n        [\"Stealth (DEX)\", 0, \"Dexterity\"],\r\n        [\"Survival (WIS)\", 0, \"Wisdom\"],\r\n      ];\r\n\r\n      columns = [\"name\", \"status\", \"ability\"];\r\n      values.forEach((val) => this.InsertIntoTable(\"Skills\", columns, val));\r\n\r\n      let coinValues = [\r\n        [\"Copper (cp)\", 0],\r\n        [\"Silver (sp)\", 0],\r\n        [\"Electrum (ep)\", 0],\r\n        [\"Gold (gp)\", 0],\r\n        [\"Platinum (pp)\", 0],\r\n      ];\r\n\r\n      columns = [\"name\", \"amount\"];\r\n      coinValues.forEach((val) => this.InsertIntoTable(\"Coins\", columns, val));\r\n\r\n      this.InsertIntoTable(\"Initial\", [\"name\", \"status\"], [\"Initial\", 1]);\r\n    } catch (error) {\r\n      console.error(\"Error:\", error);\r\n    }\r\n\r\n    return true;\r\n  };\r\n}\r\n\r\nexport const database: Database = new Database();\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}